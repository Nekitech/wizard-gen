import fs from 'node:fs';
import path from 'node:path';
import { confirm, note, select } from '@clack/prompts';

const WIZARD_DIR = path.join(process.cwd(), '.wizard');
export const SCHEME_FILE = path.join(WIZARD_DIR, 'scheme.json');

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è
 */
export async function getScheme() {
	if (!fs.existsSync(SCHEME_FILE)) {
		if (!fs.existsSync(WIZARD_DIR)) {
			fs.mkdirSync(WIZARD_DIR, { recursive: true });
		}

		const shouldCreate = await confirm({
			message: '–°—Ö–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é?',
		});

		if (!shouldCreate) {
			process.exit(0);
		}

		fs.writeFileSync(SCHEME_FILE, JSON.stringify({}, null, 2));
		note('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å—Ö–µ–º—ã .wizard/scheme.json', 'üìÅ');
		return null;
	}

	const shouldImport = await select({
		message: '–ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ö–µ–º–∞. –ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?',
		options: [
			{ value: 'import', label: '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É', hint: '–°—Ö–µ–º–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ .wizard/scheme.json' },
			{ value: 'new', label: '–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é', hint: '–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ö–µ–º–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞' },
		],
	});

	if (shouldImport === 'import') {
		const schema = JSON.parse(fs.readFileSync(SCHEME_FILE, 'utf-8'));
		note('–°—Ö–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.', '‚úÖ');
		return schema;
	}

	fs.writeFileSync(SCHEME_FILE, JSON.stringify({}, null, 2));
	note('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å—Ö–µ–º—ã .wizard/scheme.json', 'üìÅ');
	return null;
}
