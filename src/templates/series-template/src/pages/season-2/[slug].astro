---
import { getEntry } from "astro:content";
import type { Comment, Episode } from "../../content/config";
import Layout from "../../layouts/Layout.astro";
import Link from "../../components/Link.astro";
import OptimizedImage from "../../components/OptimizedImage.astro";
import {createBreadcrumbListJsonLD, getEpisodeJsonLd} from "../../shared/json-ld-helpers";
import Comments from "src/widgets/comments.astro";
import EpisodeFrame from "@components/EpisodeFrame.astro";
import {getRouteByName} from "../../shared/links";
import {RoutesName} from "../../types";
export async function getStaticPaths() {
  const episodesContent = await getEntry("episodes", "episodes");
  const episodes: Episode[] = episodesContent.data.season_2.episodes;
  const prevSeasonEpisodes: Episode[] | undefined = [...episodesContent.data.season_1.episodes];
  return episodes.map((episode, ix, arr) => ({
    params: { slug: episode.slug },
    props: {
      episode,
      prevEpisode:  ix > 0 ? arr[ix - 1]?.url : undefined,
      nextEpisode:  ix < (arr.length - 1) ? arr[ix + 1]?.url : undefined,
      prevSeasonLastEpisode: prevSeasonEpisodes ? prevSeasonEpisodes[prevSeasonEpisodes.length-1]?.url : undefined,
      nextSeasonFirstEpisode: undefined
    },
  }));
}

const episode: Episode | undefined = Astro.props.episode;
const prevEpisode: string | undefined = Astro.props.prevEpisode;
const nextEpisode: string | undefined = Astro.props.nextEpisode;

const prevSeasonLastEpisode: string | undefined = Astro.props.prevSeasonLastEpisode;

const commentsExamples: Comment[] = (await getEntry('comments', `season-2/${Astro.params.slug}`))?.data.comments || [];
---

<Layout
    url=`${import.meta.env.FULL_BASE_URL}${episode.url}`
    title={episode.title}
    description={episode.description}
    keywords={episode.keywords}
    jsonLd={{
      "@context": "https://schema.org",
      "@graph": [
        createBreadcrumbListJsonLD([
          {
            name: "Игра в кальмара",
            url: `${import.meta.env.FULL_BASE_URL}`
          },
          {
            name: episode.title,
            url: `${import.meta.env.FULL_BASE_URL}${episode.url}`
          }
        ]),
        getEpisodeJsonLd(episode, 2)
      ]
    }}
>
  <section
    class="bg-dark-bg text-white px-4 sm:px-8 md:px-16 py-10 font-primary"
  >
    <div class="max-w-6xl mx-auto">
      <nav class="text-secondary text-xs md:text-sm mb-8">
        <Link href={getRouteByName(RoutesName.MAIN).href} class="hover:text-primary transition-colors">{getRouteByName(RoutesName.MAIN).title}</Link> /
        <Link href={getRouteByName(RoutesName.SEASON_2).href} class="hover:text-primary transition-colors">{getRouteByName(RoutesName.SEASON_2).title}</Link> /
        <span class="text-gray-500">{episode.title}</span>
      </nav>

      <div class="flex flex-col md:flex-row gap-8 mb-16">
        <div class="bg-black w-full md:w-[700px] aspect-video rounded-lg">
          {episode.videoUrl ? <EpisodeFrame url={episode.videoUrl}/> : <OptimizedImage src={episode.thumbnail} alt={episode.title} class="rounded-md w-full object-cover"/>}
        </div>

        <div class="w-full md:w-[400px] shrink-0">
          <div class="space-y-4">
            <h1 class="text-xl md:text-2xl font-bold text-white">
              {(!episode.h1) ? episode.title: episode.h1}
            </h1>
            <p class="text-sm text-gray-300 leading-relaxed">
              {episode.description}
            </p>

            <div class="flex flex-col gap-1.5 text-xs text-gray-400">
              <p>Длительность: {episode.duration}</p>
              <p>Релиз: {episode.releaseDate}</p>
              <p>Возрастной рейтинг: {episode.rating}</p>
            </div>

            <div class="flex justify-between text-primary gap-3 pt-2 text-sm">
              {prevEpisode 
                ? <Link href={prevEpisode} class="hover:text-primary transition-colors">← Предыдущий</Link>
                : (
                  prevSeasonLastEpisode
                  ? <Link href={prevSeasonLastEpisode} class="hover:text-primary transition-colors">← Предыдущий сезон</Link>
                  : <span class="text-gray-700">← Предыдущий</span>
                )}

              {nextEpisode
                ? <Link href={nextEpisode} class="hover:text-primary transition-colors">Следующий →</Link>
                : <span class="text-gray-700">Следующий →</span>}
            </div>
          </div>
        </div>
      </div>

      <Comments comments={commentsExamples} />
    </div>
  </section>
</Layout>
